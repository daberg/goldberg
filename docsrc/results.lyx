#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass paper
\begin_preamble
\usepackage{indentfirst}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Goldberg's algorithm implementation and benchmarking in Python
\end_layout

\begin_layout Author
Davide Bergamaschi
\end_layout

\begin_layout Institution
Politecnico di Milano
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Abstract
\noindent

\size normal
We hereby analyze the features of our implementation of Goldberg's push-relabel
 algorithm and, utilizing benchmark results, show that the performance of
 such implementation is essentially consistent with the theoretical results
 from the literature.
\end_layout

\begin_layout Abstract
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part*
The implementation
\end_layout

\begin_layout Section*
Technology
\end_layout

\begin_layout Standard
The algorithm was implemented in Python (version 3).
 The graph-tool
\begin_inset script superscript

\begin_layout Plain Layout
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "false"

\end_inset


\end_layout

\end_inset

 external module (which relies directly on the Boost Graph Library
\begin_inset script superscript

\begin_layout Plain Layout
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"
literal "false"

\end_inset


\end_layout

\end_inset

) has been used for graph representation and manipulation.
\end_layout

\begin_layout Section*
Algorithm
\end_layout

\begin_layout Standard
This implementation is meant to be as close as possible to Goldberg's general
 push-relabel algorithm, without employing elaborate optimization.
 It uses a simple stack structure to keep track of active nodes.
 In the following section we show and discuss its most significant parts.
 We also show that its time complexity is 
\begin_inset Formula $O\left(V^{2}E\right)$
\end_inset

 and its space complexity 
\begin_inset Formula $O\text{\left(V+E\right)}$
\end_inset

.
\end_layout

\begin_layout Subsection*

\size small
Push / relabel routines
\end_layout

\begin_layout Standard
The implementation here is very straightforward, and naturally leads to
 a complexity of 
\begin_inset Formula $O\left(1\right)$
\end_inset

 for pushes and of 
\begin_inset Formula $O\left(E\right)$
\end_inset

 for relabel operations (since a relabel might result in visiting all edges
 in the worst case).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,basicstyle={\scriptsize},showstringspaces=false,captionpos=b"
inline false
status open

\begin_layout Plain Layout

def push(edge, excess, capacity, preflow, reverse_edges):
\end_layout

\begin_layout Plain Layout

    origin = edge.source()
\end_layout

\begin_layout Plain Layout

    dest = edge.target()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    delta = min(excess[origin], capacity[edge] - preflow[edge])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    preflow[edge] = preflow[edge] + delta
\end_layout

\begin_layout Plain Layout

    rev = reverse_edges[edge]
\end_layout

\begin_layout Plain Layout

    preflow[rev] = preflow[rev] - delta
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    excess[origin] = excess[origin] - delta
\end_layout

\begin_layout Plain Layout

    excess[dest] = excess[dest] + delta
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def relabel(vertex, distance, capacity, preflow):
\end_layout

\begin_layout Plain Layout

    suitable_edges = filter(
\end_layout

\begin_layout Plain Layout

        lambda edge : capacity[edge] - preflow[edge] > 0, vertex.out_edges()
\end_layout

\begin_layout Plain Layout

    )
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    dists = map(
\end_layout

\begin_layout Plain Layout

        lambda edge : distance[edge.target()], suitable_edges
\end_layout

\begin_layout Plain Layout

    )
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    new_d = min(dists) + 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    distance[vertex] = new_d
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*

\size small
Initialization
\end_layout

\begin_layout Standard
The algorithm begins by adding reverse arcs to the graph and by initializing
 the necessary structures to store run variables (temporary preflow, distance
 and excess), as well as a map to easily access the reverse of an edge in
 constant time.
 Then a simple stack is created to store active nodes, together with another
 map to enhance the stack with fast vertex membership test.
\end_layout

\begin_layout Standard
The only non constant-time operation here is the edge creation, which takes
 
\begin_inset Formula $O\left(E\right)$
\end_inset

 time.
\end_layout

\begin_layout Standard
For what concerns memory, 
\begin_inset Formula $E$
\end_inset

 residual edges have to be created, along with maps over all edges and vertices,
 hence leading to a 
\begin_inset Formula $O\left(V+E\right)$
\end_inset

 space complexity.
 Moreover, due to edge iterator issues, a further list of length 
\begin_inset Formula $E$
\end_inset

 has to be temporarily created.
 This could be avoided by employing a lazy initialization mechanism, but
 the overall space complexity would remain the same.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,basicstyle={\scriptsize},showstringspaces=false,captionpos=b,aboveskip={\smallskipamount},belowskip=20bp"
inline false
status open

\begin_layout Plain Layout

def stack_push_relabel(graph, source, target, capacity):
\end_layout

\begin_layout Plain Layout

    # Initializing data maps
\end_layout

\begin_layout Plain Layout

    reverse_edges, preflow, distance, excess = helper.create_maps(graph,
 capacity)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    # Initializing stack to keep active node
\end_layout

\begin_layout Plain Layout

    actives = structure.Stack()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    # Initializing active map
\end_layout

\begin_layout Plain Layout

    is_active = graph.new_vertex_property("bool")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    #    ...
    #
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def _create_residual_edges(graph, capacity):
\end_layout

\begin_layout Plain Layout

    #    ...
    #
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    newlist = []
\end_layout

\begin_layout Plain Layout

    for edge in graph.edges():
\end_layout

\begin_layout Plain Layout

        newlist.append((edge, edge.target(), edge.source()))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for entry in newlist:
\end_layout

\begin_layout Plain Layout

        new = graph.add_edge(entry[1], entry[2])
\end_layout

\begin_layout Plain Layout

        capacity[new] = 0
\end_layout

\begin_layout Plain Layout

        reverse_edges[entry[0]] = new
\end_layout

\begin_layout Plain Layout

        reverse_edges[new] = entry[0]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return reverse_edges
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The algorithm then proceeds with the usual push-relabel initialization,
 with the only precaution of adding activated nodes to the active list during
 the initial saturating pushes.
 Vertices first and then edges are iterated, hence time complexity will
 be 
\begin_inset Formula $O\left(V+E\right)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,basicstyle={\scriptsize},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

    #    ...
    #
\end_layout

\begin_layout Plain Layout

    # continues from push_relabel function
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    # Initializing distance, excess and active property
\end_layout

\begin_layout Plain Layout

    for v in graph.vertices():
\end_layout

\begin_layout Plain Layout

        distance[v] = 0
\end_layout

\begin_layout Plain Layout

        excess[v] = 0
\end_layout

\begin_layout Plain Layout

        is_active[v] = False
\end_layout

\begin_layout Plain Layout

    distance[source] = graph.num_vertices()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    # Initializing preflow
\end_layout

\begin_layout Plain Layout

    for edge in graph.edges():
\end_layout

\begin_layout Plain Layout

        preflow[edge] = 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    # Saturate edges outgoing from source
\end_layout

\begin_layout Plain Layout

    for s_out in source.out_edges():
\end_layout

\begin_layout Plain Layout

        cap = capacity[s_out]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # If capacity is 0, nothing to push
\end_layout

\begin_layout Plain Layout

        # Probably an added residual arc
\end_layout

\begin_layout Plain Layout

        # Skip cycle just for optimization
\end_layout

\begin_layout Plain Layout

        if cap == 0:
\end_layout

\begin_layout Plain Layout

            continue
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        preflow[s_out] = cap
\end_layout

\begin_layout Plain Layout

        preflow[reverse_edges[s_out]] = - cap
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        excess[s_out.target()] = excess[s_out.target()] + cap
\end_layout

\begin_layout Plain Layout

        excess[source] = excess[source] - cap
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # Since node has become active, add it to active stack
\end_layout

\begin_layout Plain Layout

        active = s_out.target()
\end_layout

\begin_layout Plain Layout

        if active != target and is_active[active] == False:
\end_layout

\begin_layout Plain Layout

            actives.push(active)
\end_layout

\begin_layout Plain Layout

            is_active[active] = True
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*

\size small
Main loop
\end_layout

\begin_layout Standard
This is were the sequence of push and relabel actions that give the algorithm
 its name takes place.
 At each step of the cycle, the last activated node is popped from the stack.
 All possible pushes from the selected node are performed, adding any target
 node that becomes active to the active set.
 Lastly the selected node is relabeled if it is still active.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,basicstyle={\scriptsize},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

    #    ...
    #
\end_layout

\begin_layout Plain Layout

    # continues from push_relabel function
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    cur_v = actives.pop()
\end_layout

\begin_layout Plain Layout

    while cur_v:
\end_layout

\begin_layout Plain Layout

        is_active[cur_v] = False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # Look for admissible edges
\end_layout

\begin_layout Plain Layout

        for out_e in cur_v.out_edges():
\end_layout

\begin_layout Plain Layout

            # If admissible, push flow
\end_layout

\begin_layout Plain Layout

            if (distance[cur_v] > distance[out_e.target()]
\end_layout

\begin_layout Plain Layout

                and capacity[out_e] - preflow[out_e] > 0):
\end_layout

\begin_layout Plain Layout

                helper.push(out_e, excess, capacity, preflow, reverse_edges)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                active = out_e.target()
\end_layout

\begin_layout Plain Layout

                if active != source and active != target and is_active[active]
 == False:
\end_layout

\begin_layout Plain Layout

                    actives.push(active)
\end_layout

\begin_layout Plain Layout

                    is_active[active] = True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                # Node not active anymore
\end_layout

\begin_layout Plain Layout

                if (excess[cur_v] <= 0):
\end_layout

\begin_layout Plain Layout

                    break
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # No more admissible edges
\end_layout

\begin_layout Plain Layout

        # Relabel if still active
\end_layout

\begin_layout Plain Layout

        if (excess[cur_v] > 0):
\end_layout

\begin_layout Plain Layout

            helper.relabel(cur_v, distance, capacity, preflow)
\end_layout

\begin_layout Plain Layout

            if not is_active[cur_v]:
\end_layout

\begin_layout Plain Layout

                actives.push(cur_v)
\end_layout

\begin_layout Plain Layout

                is_active[cur_v] = True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        cur_v = actives.pop()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return preflow
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To analyze time complexity, we observe that each time a vertex is selected
 for the main cycle, its outgoing edge list is possibly scanned twice, one
 time for pushing and one for relabeling.
 Since the maximum number of relabels for a vertex is 
\begin_inset Formula $2V-1$
\end_inset

, the maximum number of scans for each vertex is 
\begin_inset Formula $4V-1$
\end_inset

 (one for each relabeling, one for the pushes before each relabeling and
 one for the pushes after the last relabeling).
 Hence the global time spent to process each node 
\begin_inset Formula $v$
\end_inset

 is 
\begin_inset Formula $O\left(V\times deg_{out}\left(v\right)\right)+O\left(1\right)\times n_{pushes}(v)$
\end_inset

.
 Summing over all vertices, and recalling that the global number of pushes
 from all nodes is 
\begin_inset Formula $O\left(V^{2}E\right)$
\end_inset

, we find that the global execution time of the main loop is 
\begin_inset Formula $O\left(V^{2}E\right)$
\end_inset

 as well, which coincides with the global time complexity of our implementation,
 since it dominates the initialization complexity.
\begin_inset script superscript

\begin_layout Plain Layout
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"
literal "false"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Memory-wise, the stack is the only growing structure in this part of the
 program, but it never gets to hold more than 
\begin_inset Formula $V$
\end_inset

 vertices.
 Hence space complexity here is dominated by the initialization.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part*
Benchmarks
\end_layout

\begin_layout Section*
Description
\end_layout

\begin_layout Standard
The execution time of our implementation has been measured and benchmarked
 against the Boost Graph Library implementation of the push-relabel algorithm.
\end_layout

\begin_layout Standard
The test data is composed by 23400 randomly generated graphs, having from
 2 to 40 vertices (600 samples for every number of vertices) and random
 number of outgoing edges from each node (between 1 and the number of vertices
 of the graph).
 For each test graph, each implementation has been run once between two
 randomly selected vertices.
\end_layout

\begin_layout Standard
All tests have been conducted in a 64-bit GNU/Linux environment running
 on a Pentium J3710 machine.
\end_layout

\begin_layout Section*
Results
\end_layout

\begin_layout Standard
The observed results empirically confirm that the execution time of our
 implementation is polynomial and grows superlinearly with the number of
 vertices and linearly with the number of edges.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename time_vertices.svg
	lyxscale 25
	scale 30
	BoundingBox 300bp 0bp 2023bp 866bp

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Average execution time against number of vertices
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename time_edges.svg
	lyxscale 25
	scale 30
	BoundingBox 300bp 0bp 2023bp 866bp

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Average execution time against number of edges
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is evident that BGL implementation rapidly outperforms ours.
 This is partially because BGL boasts a more optimized implementation of
 the algorithm (theoretical time complexity 
\begin_inset Formula $O\left(V^{3}\right)$
\end_inset

)
\begin_inset script superscript

\begin_layout Plain Layout
\begin_inset CommandInset citation
LatexCommand cite
key "key-4"
literal "false"

\end_inset


\end_layout

\end_inset

, but also because of the speedup of compiled C++ with respect to interpreted
 Python code.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "1"
key "key-1"
literal "false"

\end_inset

Tiago P.
 Peixoto, “The graph-tool python library”, figshare.
 (2014) DOI: 10.6084/m9.figshare.1164194
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "2"
key "key-2"
literal "false"

\end_inset

https://www.boost.org
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "3"
key "key-3"
literal "false"

\end_inset

Goldberg, A V; Tarjan, R E (1986).
 "A new approach to the maximum flow problem".
 Proceedings of the eighteenth annual ACM symposium on Theory of computing
 - STOC '86.
 p.
 136.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "4"
key "key-4"
literal "false"

\end_inset

https://www.boost.org/doc/libs/1_68_0/libs/graph/doc/push_relabel_max_flow.html
\end_layout

\end_body
\end_document
